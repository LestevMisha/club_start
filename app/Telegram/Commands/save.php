<?php

namespace App\Telegram\Commands;

use App\Models\User;
use App\Services\TelegramServices;
use Telegram\Bot\Commands\Command;
use Telegram\Bot\Laravel\Facades\Telegram;


// BOT'S JOB
class StartCommand extends Command
{
    protected string $name = 'start';
    protected string $description = 'Start Command to get you started';

    public function handle()
    {
        /* --------------- MARK: INIT --------------- */
        logger("app/Telegram/Commands/StartCommand.php");
        $updates = $this->getUpdate();

        // services data
        $group_id = config("services.telegram.group_id");



        /* --------------- MARK: CHECK IN --------------- */
        // Ignore everything except real messages
        $chat_id = isset($updates["message"]["chat"]["id"]) ? $updates["message"]["chat"]["id"] : null;
        if (!$chat_id) return;

        // Ignore all meassages in `Club Start` group
        if ($chat_id == config("services.telegram.group_id")) return;

        // Ignore if it is a bot
        if ($updates["message"]["from"]["is_bot"]) return;



        /* --------------- MARK: DATA RETREIVING --------------- */
        // Retreiving important parameters (metadata)
        $telegram_two_parameters = $updates["message"]["text"];

        // Retreiving basic user info
        $telegram_user = $updates['message']['from'];
        if ($telegram_user) {
            // full name
            $telegram_user_full_name = $telegram_user["first_name"] . " " . $telegram_user["last_name"];
            // telegram id
            $telegram_user_id = $telegram_user["id"];
            // username
            $telegram_user_username = $telegram_user["username"];
        }



        try {
            /* --------------- MARK: INIT STEP-2 --------------- */
            // Getting 2 parameters (metadata)
            $data = explode(" ", $telegram_two_parameters)[1];
            list($uuid, $target) = explode("_", $data);



            /* --------------- MARK: CHECK IN STEP-2 --------------- */
            // Getting user from database
            $user = User::where("uuid", $uuid)->first();
            // If user edited the telegram link and made it incorrect, then inform that uuid was changed and is currently incorrect
            if (!$user) {
                $this->replyWithMessage(['text' => "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ –≤—ã –∏–∑–º–µ–Ω—è–ª–∏ telegram —Å—Å—ã–ª–∫—É, –ø–æ–∂–∞–π–ª—É–π—Å—Ç–∞ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ `–ü–µ—Ä–µ–π—Ç–∏ –≤ –¢–µ–ª–µ–≥—Ä–∞–º` –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫—É."]);
                return;
            }

            /* check if web-user is trying to get information from the telegram account,
            that is different to the one that is linked to the web-user account */
            $telegram_user = User::where("telegram_id", $telegram_user_id)->first();
            if (($telegram_user !== null)) {
                $this->replyWithMessage(['text' => "–î–∞–Ω–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É start-–∞–∫–∫–∞—É–Ω—Ç—É."]);
                return;
            }



            /* --------------- MARK: PROCCESSING --------------- */
            if ($target === "verify") {

                // check if there's none with this id registered, otherewise decline.
                if (User::where("telegram_id", $telegram_user_id)->exists()) {
                    $this->replyWithMessage(['text' => "–•–º.. ü§î —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –±—ã–ª –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å —Ç—É—Ç üëâ" . " " . config("services.website.url")]);
                    return;
                }

                // Check if user is already verified, if so REPLY
                if ($user->telegram_id !== null) {
                    $this->replyWithMessage(['text' => "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –≤e—Ä–µ—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω. üòé –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Ç—É—Ç üëâ" . " " . config("services.website.url")]);
                    return;
                }

                // Check if user is already in the club's group (exempted from the payment)
                try {
                    $request = Telegram::getChatMember([
                        "chat_id" => $group_id,
                        "user_id" => $telegram_user_id,
                    ]);
                    logger($request);
                    if ($request->status === "kicked") return;

                    // user is in the group chat if he was successfully found.
                    $user->group_exempted = 1;
                    $user->telegram_id = $telegram_user_id;
                    $user->telegram_username = $telegram_user_username;
                    $user->save();
                    $this->replyWithMessage(['text' => "‚úÖ üéâ " . $telegram_user_full_name . " " . "–≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –æ—Ñ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –≤–µ–±—Å–∞–π—Ç–µ –ö–ª—É–±–∞ Start!\n\n–¢–∞–∫ –∫–∞–∫ –≤—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –Ω–∞—à–µ–π –∫–æ–º–º–∞–Ω–¥—ã –º—ã –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤–∞—Å –æ—Ç –æ–ø–ª–∞—Ç—ã –≤ 6000 —Ä—É–±.\n\n–ü—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ —Å—Ä–∞–∑—É –∫ —Ä–∞–±–æ—Ç–µ" . " " . config("services.website.url") . "/dashboard"]);
                    return true;
                } catch (\Exception $e) {
                    // ignore .. continue to register user
                }

                // update user
                $user->telegram_id = $telegram_user_id;
                $user->telegram_username = $telegram_user_username;
                $user->save();

                if ($request) {
                    if ($request->status === "kicked") {
                        $this->replyWithMessage(['text' => "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º ‚úÖ" . $telegram_user_full_name . "! " . "–≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É. –í–µ—Ä–Ω—É—Ç—å—Å—è üëâ" . " " . config("services.website.url")]);
                    }
                }

                $this->replyWithMessage(['text' => "‚úÖ" . $telegram_user_full_name . " " . "–≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É. –í–µ—Ä–Ω—É—Ç—å—Å—è üëâ" . " " . config("services.website.url")]);
            } else if ($target === "information") {
                $this->replyWithMessage(['text' => "‚úÖ" . $telegram_user_full_name . " " . file_get_contents(__DIR__ . "/messages/registerResponse.txt")]);
                $this->replyWithMessage(['text' => "–î–æ—Å—Ç—É–ø –≤ –∫–ª—É–± START ‚úÖ - https://t.me/+U86N3fnqA7wzM2Vl"]);
            } else if ($target === "changeEmail") {
                $telegramServices = app(TelegramServices::class);
                $text = $telegramServices->markdownv2("*$user->name* –≤–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ø–æ—á—Ç–∞ $user->email. –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—é—é –ø–æ—á—Ç—É –Ω–∞–ø–∏—à–∏—Ç–µ /changeEmail –ø—Ä–æ–±–µ–ª <–Ω–æ–≤–∞—è –ø–æ—á—Ç–∞>, –ø—Ä–∏–º–µ—Ä: `/changeEmail example@mail.ru`");
                Telegram::sendMessage([
                    "chat_id" => $updates["message"]["chat"]["id"],
                    "text" => $text,
                    "parse_mode" => "MarkdownV2",
                ]);
            }
        } catch (\Exception $e) {
            // Check if user wasn't transferred, if so REPLY
            $this->replyWithMessage(['text' => "–•–æ—Ç–∏—Ç–µ –∑—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ Start –ú–∞—Ä–∞—Ñ–æ–Ω? üòÉ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ üëâ" . " " . config("services.website.url")]);
            return;
        }
    }
}
