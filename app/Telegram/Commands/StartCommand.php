<?php

namespace App\Telegram\Commands;

use App\Models\User;
use App\Services\TelegramServices;
use Telegram\Bot\Commands\Command;
use Telegram\Bot\Laravel\Facades\Telegram;

class StartCommand extends Command
{
    protected string $name = 'start';
    protected string $description = 'Start Command to get you started';

    public function handle()
    {
        // retrieving information
        $updates = $this->getUpdate();
        $activation = $updates["message"]["text"];
        $new_user = $updates['message']['from'];
        $last_name = isset($new_user['last_name']) ? $new_user['last_name'] : '';
        $name = $new_user['first_name'] . " " . $last_name;
        $id = $new_user["id"];
        logger(json_encode($updates));
        logger($updates["message"]["chat"]["id"]);

        try {
            // get sent metadata (if possible)
            $data = explode(" ", $activation)[1];
            list($uuid, $target) = explode("_", $data);
            $user = User::where("uuid", $uuid)->first();

            if ($target === "verify") {

                // check if there's none with this id registered, otherewise decline.
                if (User::where("telegram_id", $id)->exists()) {
                    $this->replyWithMessage(['text' => "–•–º.. ü§î —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –±—ã–ª –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å —Ç—É—Ç üëâ" . " " . config("services.website.url")]);
                    return;
                }

                // Check if user is already verified, if so REPLY
                if ($user->telegram_id !== null) {
                    $this->replyWithMessage(['text' => "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –≤e—Ä–µ—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω. üòé –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Ç—É—Ç üëâ" . " " . config("services.website.url")]);
                    return;
                }

                // update user
                $user->telegram_id = $new_user['id'];
                $user->telegram_username = $new_user['username'];
                $user->save();
                $this->replyWithMessage(['text' => "‚úÖ" . $name . " " . "–≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É. –í–µ—Ä–Ω—É—Ç—å—Å—è üëâ" . " " . config("services.website.url")]);
            } else if ($target === "information") {
                $this->replyWithMessage(['text' => "‚úÖ" . $name . " " . file_get_contents(__DIR__ . "/messages/registerResponse.txt")]);
                $this->replyWithMessage(['text' => "–î–æ—Å—Ç—É–ø –≤ –∫–ª—É–± START ‚úÖ - https://t.me/+U86N3fnqA7wzM2Vl"]);
            } else if ($target === "changeEmail") {
                $telegramServices = app(TelegramServices::class);
                $text = $telegramServices->markdownv2("*$user->name* –≤–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ø–æ—á—Ç–∞ $user->email. –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—é—é –ø–æ—á—Ç—É –Ω–∞–ø–∏—à–∏—Ç–µ /changeEmail –ø—Ä–æ–±–µ–ª <–Ω–æ–≤–∞—è –ø–æ—á—Ç–∞>, –ø—Ä–∏–º–µ—Ä: `/changeEmail example@mail.ru`");
                Telegram::sendMessage([
                    "chat_id" => $updates["message"]["chat"]["id"],
                    "text" => $text,
                    "parse_mode" => "MarkdownV2",
                ]);
            }
        } catch (\Exception $e) {
            // Check if user wasn't transferred, if so REPLY
            $this->replyWithMessage(['text' => "–•–æ—Ç–∏—Ç–µ –∑—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ Start –ú–∞—Ä–∞—Ñ–æ–Ω? üòÉ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ üëâ" . " " . config("services.website.url")]);
            return;
        }
    }
}
